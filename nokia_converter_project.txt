
// index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MP4 to Nokia Converter</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            padding: 50px;
        }
        .container {
            max-width: 500px;
            margin: 0 auto;
        }
        input[type="file"] {
            display: block;
            margin: 20px auto;
        }
        button {
            padding: 10px 20px;
            background-color: #007BFF;
            color: white;
            border: none;
            cursor: pointer;
        }
        button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>Convert MP4 to Nokia Keypad Format</h1>
        <p>Select an MP4 file to convert to 320x240 3GP for older Nokia phones:</p>

        <form id="uploadForm" action="/convert" method="POST" enctype="multipart/form-data">
            <input type="file" name="mp4file" accept="video/mp4" required>
            <button type="submit">Convert to Nokia Format</button>
        </form>

        <div id="output"></div>
    </div>

    <script>
        document.getElementById('uploadForm').addEventListener('submit', function(event) {
            event.preventDefault();

            const formData = new FormData(this);
            fetch('/convert', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const outputDiv = document.getElementById('output');
                    const downloadLink = document.createElement('a');
                    downloadLink.href = data.fileUrl;
                    downloadLink.innerText = 'Download Converted File';
                    downloadLink.download = 'converted_file.3gp';
                    outputDiv.appendChild(downloadLink);
                } else {
                    alert('File conversion failed. Please try again.');
                }
            })
            .catch(err => {
                alert('Error occurred during conversion: ' + err.message);
            });
        });
    </script>

</body>
</html>

// server.js (Node.js backend)

const express = require('express');
const fileUpload = require('express-fileupload');
const { exec } = require('child_process');
const path = require('path');
const fs = require('fs');

const app = express();
app.use(fileUpload());
const uploadDir = './uploads';

if (!fs.existsSync(uploadDir)){
    fs.mkdirSync(uploadDir);
}

app.post('/convert', (req, res) => {
    if (!req.files || Object.keys(req.files).length === 0) {
        return res.status(400).send('No files were uploaded.');
    }

    const mp4file = req.files.mp4file;
    const inputFilePath = path.join(uploadDir, `${Date.now()}_${mp4file.name}`);
    const outputFilePath = path.join(uploadDir, `${Date.now()}_converted.3gp`);

    // Save the file to the server
    mp4file.mv(inputFilePath, (err) => {
        if (err) {
            return res.status(500).send(err);
        }

        // Use FFmpeg to convert MP4 to 3GP with 320x240 resolution
        const command = `ffmpeg -i ${inputFilePath} -s 320x240 -c:v libx264 -c:a aac ${outputFilePath}`;
        exec(command, (error, stdout, stderr) => {
            // Remove the original MP4 file after conversion
            fs.unlinkSync(inputFilePath);

            if (error) {
                return res.json({ success: false, message: 'Conversion failed', error });
            }

            return res.json({ 
                success: true, 
                fileUrl: `http://localhost:3000/${outputFilePath}` 
            });
        });
    });
});

// Serve converted files
app.use('/uploads', express.static(uploadDir));

app.listen(3000, () => {
    console.log('Server running on http://localhost:3000');
});
